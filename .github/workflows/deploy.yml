name: Deploy Symfony to OVH

on:
  push:
    branches:
      - recette # ou la branche que vous souhaitez déployer

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Vérifier le code source depuis GitHub
      - name: Checkout code PHp
        uses: actions/checkout@v2

      # Installer PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # Remplacez par la version PHP que vous utilisez
          extensions: mbstring, xml, bcmath

      
      # Installer Composer
      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer

      # Déployer via FTP
      - name: Deploy to OVH via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.OVH_FTP_HOST }}  # Hôte FTP
          username: ${{ secrets.OVH_FTP_USERNAME }}  # Nom d'utilisateur FTP
          password: ${{ secrets.OVH_FTP_PASSWORD }}  # Mot de passe FTP
          local-dir: ./  # Répertoire local à déployer
          server-dir: /testapi/  # Répertoire distant sur votre serveur OVH
          dry-run: false  # Déploiement réel, pas en mode simulation
        
      - name: Add SSH host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.OVH_SSH_HOST }} >> ~/.ssh/known_hosts


      # Installer sshpass
      - name: Install sshpass
        run: sudo apt-get install sshpass

      # Installer PHP 8.2 et Composer sur le serveur OVH à chaque déploiement
      - name: Install PHP 8.2 and Composer on OVH server
        run: |
          sshpass -p "${{ secrets.OVH_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o PubkeyAuthentication=no ${{ secrets.OVH_SSH_USER }}@${{ secrets.OVH_SSH_HOST }} << 'EOF'
            # Télécharger PHP 8.2 et installer localement
            wget https://www.php.net/distributions/php-8.2.0.tar.bz2
            tar -xjf php-8.2.0.tar.bz2
            cd php-8.2.0
            ./configure --prefix=$HOME/php --enable-mbstring --enable-xml --enable-bcmath
            make -j$(nproc)
            make install

            # Ajouter PHP au PATH
            export PATH=$HOME/php/bin:$PATH

            # Télécharger Composer et l'installer localement
            curl -sS https://getcomposer.org/installer | php
            mv composer.phar $HOME/bin/composer
            export PATH=$HOME/bin:$PATH

            # Vérifier l'installation de PHP et Composer
            php -v
            composer --version 
          EOF

      # Autres actions si nécessaires (exécuter les commandes Symfony pour la prod, par exemple)
      - name: Install Composer dependancies - Clear Symfony cache - Run migrations - Create .env.prod
        run: |
          sshpass -p "${{ secrets.OVH_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -v -T ssh://${{ secrets.OVH_SSH_USER }}@${{ secrets.OVH_SSH_HOST }}:22 << 'EOF'
            cd testapi

            php -v
            composer --version

            composer install --no-dev --optimize-autoloader

            echo "DATABASE_URL=${{ secrets.RECETTE_DATABASE_URL }}" >> .env.prod
            echo "S3_KEY=${{ secrets.RECETTE_S3_KEY }}" >> .env.prod
            echo "S3_SECRET=${{ secrets.RECETTE_S3_SECRET }}" >> .env.prod
            echo "S3_REGION=${{ secrets.RECETTE_S3_REGION }}" >> .env.prod
            echo "S3_BUCKET=${{ secrets.RECETTE_S3_BUCKET }}" >> .env.prod
            echo "STRIPE_SECRET_KEY=${{ secrets.RECETTE_STRIPE_SECRET_KEY }}" >> .env.prod
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.RECETTE_STRIPE_WEBHOOK_SECRET }}" >> .env.prod
            echo "MAILER_DSN=${{ secrets.RECETTE_MAILER_DSN }}" >> .env.prod
            
            php bin/console cache:clear --env=prod
            php bin/console doctrine:migrations:migrate --env=prod
            php bin/console assets:install --env=prod
          EOF
