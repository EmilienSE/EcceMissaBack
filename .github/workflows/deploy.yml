name: Deploy Symfony to OVH

on:
  push:
    branches:
      - recette # ou la branche que vous souhaitez d√©ployer

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # V√©rifier le code source depuis GitHub
      - name: Checkout code PHp
        uses: actions/checkout@v2

      # Installer PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # Remplacez par la version PHP que vous utilisez
          extensions: mbstring, xml, bcmath

      
      # Installer Composer
      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer

      # D√©ployer via FTP
      - name: Deploy to OVH via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.OVH_FTP_HOST }}  # H√¥te FTP
          username: ${{ secrets.OVH_FTP_USERNAME }}  # Nom d'utilisateur FTP
          password: ${{ secrets.OVH_FTP_PASSWORD }}  # Mot de passe FTP
          local-dir: ./  # R√©pertoire local √† d√©ployer
          server-dir: /testapi/  # R√©pertoire distant sur votre serveur OVH
          dry-run: false  # D√©ploiement r√©el, pas en mode simulation
        
      - name: Add SSH host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.OVH_SSH_HOST }} >> ~/.ssh/known_hosts

      # Autres actions si n√©cessaires (ex√©cuter les commandes Symfony pour la prod, par exemple)
      - name: Install Composer - Clear Symfony cache - Run migrations - Create .env.prod
        run: |
          sshpass -p "${{ secrets.OVH_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -v -T ssh://${{ secrets.OVH_SSH_USER }}@${{ secrets.OVH_SSH_HOST }}:22 << 'EOF'
            
            alias php='/usr/local/php8.2/bin/php'
            export PATH=/usr/local/php8.2/bin:$PATH

            cd /home/eccemiz/testapi

            # T√©l√©charger Composer et l'installer localement
            curl -sS https://getcomposer.org/installer | php

            php composer.phar install

            # Mettre √† jour les informations de .env.prod
            sed -i "s#^DATABASE_URL=.*#DATABASE_URL=\"mysql://${{ secrets.RECETTE_DATABASE_USER }}:${{ secrets.RECETTE_DATABASE_PASSWORD }}@${{ secrets.RECETTE_DATABASE_HOST }}:3306/${{ secrets.RECETTE_DATABASE_NAME }}?serverVersion=8.0.32&charset=utf8mb4\"#" .env.prod
            sed -i "s#^S3_KEY=.*#S3_KEY=${{ secrets.RECETTE_S3_KEY }}#" .env.prod
            sed -i "s#^S3_SECRET=.*#S3_SECRET=${{ secrets.RECETTE_S3_SECRET }}#" .env.prod
            sed -i "s#^S3_REGION=.*#S3_REGION=${{ secrets.RECETTE_S3_REGION }}#" .env.prod
            sed -i "s#^S3_BUCKET=.*#S3_BUCKET=${{ secrets.RECETTE_S3_BUCKET }}#" .env.prod
            sed -i "s#^STRIPE_SECRET_KEY=.*#STRIPE_SECRET_KEY=${{ secrets.RECETTE_STRIPE_SECRET_KEY }}#" .env.prod
            sed -i "s#^STRIPE_WEBHOOK_SECRET=.*#STRIPE_WEBHOOK_SECRET=${{ secrets.RECETTE_STRIPE_WEBHOOK_SECRET }}#" .env.prod
            sed -i "s#^MAILER_DSN=.*#MAILER_DSN=\"${{ secrets.RECETTE_MAILER_DSN }}\"#" .env.prod
            
            php bin/console cache:clear --env=prod
            
            # V√©rifier s'il y a des migrations en attente
            if php bin/console doctrine:migrations:status | grep -q "New Migrations"; then
                echo "‚úÖ Des migrations sont en attente. Ex√©cution..."
                php bin/console doctrine:migrations:migrate --env=prod --no-interaction
            else
                echo "üîπ Aucune migration en attente. Skip."
            fi

            php bin/console assets:install --env=prod
          EOF
